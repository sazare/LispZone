コードとファイルを見ながらこうだろうと想定した仕様
コードをみているだけではわからない部分あり

[BEL]
信じていることの初期設定。

1行の構成
(A n C) :基本形
Aが信じていることを表す語。
Aは語であり、INFで参照される
BELを読み込むと、Aのレベルの初期値=nで登録される。
CはAのクラスを示しているが、クラスが意味を持つのはINNの場合のみ。

(A n JUMP) : 感情の変化に関係する記述
(A n INN)  : インタビューに関連する記述
(A n DOC *A m) : Aと*Aは対立する概念である。

READBELの実行によって
- アトムAのプロパティNTRUTHにnが設定される。
- Aと*Aはお互いのプロパティOPPOSに設定される。
- INNの場合は、AのクラスにINNが設定される


[INF]
推論規則を定義している。

基本形
(カテゴリー A B)
カテゴリーは
TH2
EMOTE
IFnnnn
のどれか。
AはBELで定義した語か(A n)の形のリスト
Bは、listであり、その要素は
- BELで定義した語か'*B'
- ラムダ名
- LISPフォーム

ラムダ名は、元のparryでは^H名前 という形をしていたが
制御コードである^Hは読めないので、この実装では@@名前にした

2パターンある
A) (TH2 A B) or (EMOTE A B)
B) (IFnnnn A B)

AはBELで定義した語または(A n) nは数字。
Bは語、ラムダ名、関数フォームのリスト


READINFの実行によって

A) の場合
 A :TH2 -> B
AのプロパティTH2の値がBという意味
または
 A :EMOTE -> B

関数フォームの関数には、LISPの関数と次の関数が使える
- MEASURE
- BL

変数には
- @FACTS
- @MAFIA
- FLARE
- MISCNO
- INRTNO
- STOPIC

これは実際のINFで使用されているもの

変数はmlispの場合、動的バインディングだと思われる。
commonlispの場合、静的バインディングになるので、何かする必要がありそう。

B)の場合
処理後IFnnnnに次のプロパティが設定される
IFnnnn : THEOREM -> B

Bが名前ならば
B : TH -> (IFnnnnのリスト)

IFnnnnのリストの要素は、他のBを参照しているIFnnnnのリスト

参照している名前がラムダ名かBELの語でなければ、その意味のメッセージがでる

の場合




