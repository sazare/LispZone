(defun readdata (fname)
  (with-open-file (in fname :direction :input)
    (do ((res nil (cons next res))
      (next (read in nil 'eof) (read in nil 'eof)))
      ((equal next 'eof) res)))
)

(defun readsexp (fname)
  (let (alls nill)
  (with-open-file (stream fname :direction :input)
    (do ((sexp (read stream nil)(read stream nil)))
        ((null sexp))
	(progn (print sexp)
	       (unless (eq sexp '~) (setq alls (cons sexp alls))))
	)
  (reverse alls)
  )
  )
)

(defun readstr (fname)
  (let (alls nill)
  (with-open-file (stream fname :direction :input)
    (do ((sexp (read-line stream nil)(read-line stream nil)))
        ((null sexp))
	(progn (print sexp)
	       (setq alls (cons sexp alls))))
	)
  (reverse alls)
  )
)

